{"version":3,"sources":["utils/habits-functions.ts","context/habits-context.tsx","utils/date-functions.ts","components/date-block/date-block.tsx","components/date-block-container/date-block-container.tsx","components/habit-card/habit-card.tsx","components/habit-container/habits-container.tsx","components/add-habit/add-habit.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["convertLedgerSetToArray","habits","map","habit","id","title","ledger","Array","from","convertLedgerArrayToSet","Set","HabitsContext","createContext","addHabit","deleteHabit","addEntry","date","deleteEntry","habitsReducer","action","type","console","log","undefined","newHabit","v4","filter","add","delete","HabitContextManager","props","useReducer","dispatch","useEffect","storedHabits","localStorage","getItem","parsedStoredHabits","JSON","parse","stringify","setItem","value","Provider","children","convertDateToStr","getFullYear","getMonth","getDate","getNthDayBefore","dateStr","n","dateNum","Number","Date","getNDaysArray","nDaysArray","i","push","DateBlock","status","useContext","className","onClick","find","alert","has","toggleEntry","DateBlockContainer","days","nDaysBoolean","getNDaysToBoolean","idx","key","HabitCard","onDoubleClick","HabitsContainer","reverse","AddHabit","useState","setTitle","onSubmit","e","preventDefault","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a76aedb.chunk.js","sourcesContent":["import { v4 } from 'uuid';\n\nimport { Habit } from './interfaces';\n\nexport function addHabit(habits: Habit[], title: string | undefined): Habit[] {\n  if (title === undefined) return habits;\n  const newHabit: Habit = {\n    id: v4(),\n    title: title,\n    ledger: new Set()\n  };\n  return [ ...habits, newHabit ];\n}\n\nexport function deleteHabit(habits: Habit[], id: string | undefined): Habit[] {\n  if (id === undefined) return habits;\n  return habits.filter((habit) => (habit.id === id ? false : true));\n}\n\nexport function addEntry(\n  habits: Habit[],\n  id: string | undefined,\n  date: string | undefined\n): Habit[] {\n  if (id === undefined || date === undefined) return habits;\n  return habits.map(\n    (habit) =>\n      habit.id === id ? { ...habit, ledger: habit.ledger.add(date) } : habit\n  );\n}\n\nexport function deleteEntry(\n  habits: Habit[],\n  id: string | undefined,\n  date: string | undefined\n): Habit[] {\n  if (id === undefined || date === undefined) return habits;\n  return habits.map((habit) => {\n    if (habit.id === id) habit.ledger.delete(date);\n    return habit;\n  });\n}\n\nexport function convertLedgerSetToArray(\n  habits: Habit[]\n): { id: string; title: string; ledger: string[] }[] {\n  if (!habits) return [];\n  const convertedHabits = habits.map((habit) => ({\n    id: habit.id,\n    title: habit.title,\n    ledger: Array.from(habit.ledger)\n  }));\n\n  return convertedHabits;\n}\n\nexport function convertLedgerArrayToSet(\n  habits: { id: string; title: string; ledger: string[] }[]\n): Habit[] {\n  if (!habits) return [];\n  const convertedHabits = habits.map((habit) => ({\n    id: habit.id,\n    title: habit.title,\n    ledger: new Set(habit.ledger)\n  }));\n\n  return convertedHabits;\n}\n","import React, { createContext, useReducer, useEffect } from 'react';\n\nimport { Habit, Action, HabitsContextType } from '../utils/interfaces';\nimport {\n  addHabit,\n  deleteHabit,\n  addEntry,\n  deleteEntry,\n  convertLedgerArrayToSet,\n  convertLedgerSetToArray\n} from '../utils/habits-functions';\n\nexport const HabitsContext = createContext<HabitsContextType>({\n  habits: [],\n  addHabit: (title) => {\n    return;\n  },\n  deleteHabit: (id) => {\n    return;\n  },\n  addEntry: (id, date) => {\n    return;\n  },\n  deleteEntry: (id, date) => {\n    return;\n  }\n});\n\nconst habitsReducer = (habits: Habit[], action: Action) => {\n  switch (action.type) {\n    case 'ADD_ITEM':\n      console.log('addHabit Called', { action });\n      return addHabit(habits, action.title);\n    case 'DELETE_ITEM':\n      console.log('deleteHabit Called', { action });\n      return deleteHabit(habits, action.id);\n    case 'ADD_ENTRY':\n      console.log('addEntry Called', { action });\n      return addEntry(habits, action.id, action.date);\n    case 'DELETE_ENTRY':\n      console.log('deleteEntry Called', { action });\n      return deleteEntry(habits, action.id, action.date);\n    case 'LOAD_HABITS':\n      console.log('habits loaded', { action });\n      return action.habits ? action.habits : [];\n    default:\n      return habits;\n  }\n};\n\nconst HabitContextManager: React.FC<{ children?: any }> = (props) => {\n  const [ habits, dispatch ] = useReducer(habitsReducer, []);\n\n  useEffect(() => {\n    const storedHabits = localStorage.getItem('stored-habits');\n    if (storedHabits) {\n      const parsedStoredHabits = JSON.parse(storedHabits);\n      dispatch({\n        type: 'LOAD_HABITS',\n        habits: convertLedgerArrayToSet(parsedStoredHabits.habits)\n      });\n    }\n  }, []);\n\n  useEffect(\n    () => {\n      const storedHabits = JSON.stringify({\n        habits: convertLedgerSetToArray(habits)\n      });\n      localStorage.setItem('stored-habits', storedHabits);\n    },\n    [ habits ]\n  );\n\n  const value = {\n    habits: habits,\n    addHabit: (title: string) =>\n      dispatch({\n        type: 'ADD_ITEM',\n        title: title\n      }),\n    deleteHabit: (id: string) =>\n      dispatch({\n        type: 'DELETE_ITEM',\n        id: id\n      }),\n    addEntry: (id: string, date: string) => {\n      return dispatch({\n        type: 'ADD_ENTRY',\n        id: id,\n        date: date\n      });\n    },\n    deleteEntry: (id: string, date: string) => {\n      return dispatch({\n        type: 'DELETE_ENTRY',\n        id: id,\n        date: date\n      });\n    }\n  };\n\n  return (\n    <HabitsContext.Provider value={value}>\n      {props.children}\n    </HabitsContext.Provider>\n  );\n};\n\nexport default HabitContextManager;\n","export function convertDateToStr(date: Date): string {\n  return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\n}\n\nexport function getNthDayBefore(dateStr: string, n: number): string {\n  const dateNum = Number(new Date(dateStr));\n  return convertDateToStr(new Date(dateNum - n * 86400000));\n}\n\nexport function getNDaysArray(dateStr: string, n: number): string[] {\n  const nDaysArray = [];\n  for (let i = 0; i < n; ++i) {\n    nDaysArray.push(getNthDayBefore(dateStr, i));\n  }\n  return nDaysArray;\n}\n\nexport function getNDaysToBoolean(\n  nDaysArray: string[],\n  ledger: Set<string>\n): boolean[] {\n  return nDaysArray.map((dateStr) => (ledger.has(dateStr) ? true : false));\n}\n","import React, { useContext } from 'react';\n\nimport { HabitsContext } from '../../context/habits-context';\nimport { Habit } from '../../utils/interfaces';\n\nimport './date-block.css';\n\nconst DateBlock: React.FC<{ id: string; date: string; status: boolean }> = ({\n  id,\n  date,\n  status\n}) => {\n  const value = useContext(HabitsContext);\n\n  const toggleEntry = (id: string, date: string) => {\n    const habit: Habit | undefined = value.habits.find(\n      (habit) => habit.id === id\n    );\n    console.log(habit);\n    if (habit === undefined) return alert(\"Habit id doesn't exist\");\n    return habit.ledger.has(date)\n      ? value.deleteEntry(id, date)\n      : value.addEntry(id, date);\n  };\n\n  return (\n    <div\n      className={`date-block ${status ? 'green' : 'red'}`}\n      onClick={() => toggleEntry(id, date)}\n    />\n  );\n};\n\nexport default DateBlock;\n","import React from 'react';\n\nimport { Habit } from '../../utils/interfaces';\nimport { getNDaysArray, getNDaysToBoolean } from '../../utils/date-functions';\nimport DateBlock from '../date-block/date-block';\n\nimport './date-block-container.css';\n\nconst DateBlockContainer: React.FC<{\n  habit: Habit;\n  days: number;\n  date: string;\n}> = ({ habit: { id, ledger }, days, date }) => {\n  const nDaysArray = getNDaysArray(date, days);\n  const nDaysBoolean = getNDaysToBoolean(nDaysArray, ledger);\n\n  return (\n    <div className='date-block-container'>\n      {nDaysBoolean.map((status, idx) => (\n        <DateBlock key={idx} id={id} date={nDaysArray[idx]} status={status} />\n      ))}\n    </div>\n  );\n};\n\nexport default DateBlockContainer;\n","import React, { useContext } from 'react';\n\nimport './habit-card.css';\nimport DateBlockContainer from '../date-block-container/date-block-container';\nimport { convertDateToStr } from '../../utils/date-functions';\nimport { HabitsContext } from '../../context/habits-context';\n\nconst HabitCard: React.FC<{\n  id: string;\n  title: string;\n  ledger: Set<string>;\n}> = ({ id, title, ledger }) => {\n  const value = useContext(HabitsContext);\n\n  return (\n    <div className='habit-card' onDoubleClick={() => value.deleteHabit(id)}>\n      <div className='habit-title'>{title}</div>\n      <DateBlockContainer\n        date={convertDateToStr(new Date())}\n        days={10}\n        habit={{ id, title, ledger }}\n      />\n    </div>\n  );\n};\n\nexport default HabitCard;\n","import React, { useContext } from 'react';\n\nimport { HabitsContext } from '../../context/habits-context';\nimport HabitCard from '../habit-card/habit-card';\n\nimport './habits-container.css';\nimport { convertDateToStr, getNDaysArray } from '../../utils/date-functions';\n\nconst HabitsContainer: React.FC<{}> = () => {\n  const value = useContext(HabitsContext);\n  const nDaysArray = getNDaysArray(convertDateToStr(new Date()), 10);\n  nDaysArray.reverse();\n\n  return (\n    <div className='habits-container'>\n      <div className='container-title'>\n        {nDaysArray.map((date) => (\n          <div className='date-hint' key={date}>\n            {`${new Date(date).getDate()}/${new Date(date).getMonth()}`}\n          </div>\n        ))}\n      </div>\n      <div>\n        {value.habits.map((habit) => <HabitCard key={habit.id} {...habit} />)}\n      </div>\n    </div>\n  );\n};\n\nexport default HabitsContainer;\n","import React, { useState, useContext } from 'react';\nimport { HabitsContext } from '../../context/habits-context';\n\nimport './add-habit.css';\n\nconst AddHabit: React.FC<{}> = () => {\n  const value = useContext(HabitsContext);\n  const [ title, setTitle ] = useState<string>('');\n\n  return (\n    <div className='add-habit-container'>\n      <form\n        className='add-habit'\n        onSubmit={(e) => {\n          e.preventDefault();\n          setTitle('');\n        }}\n      >\n        <input\n          type='text'\n          placeholder='Add New Habit'\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <button onClick={() => value.addHabit(title)}>&#10140;</button>\n      </form>\n      <hr className='division' />\n    </div>\n  );\n};\n\nexport default AddHabit;\n","import React from 'react';\n\nimport HabitContextManager from './context/habits-context';\nimport HabitsContainer from './components/habit-container/habits-container';\n\nimport './App.css';\nimport AddHabit from './components/add-habit/add-habit';\n\nconst App: React.FC<{}> = () => (\n  <HabitContextManager>\n    <header className='header'>\n      <span className='header-text'>&#8634; Repeat</span>\n    </header>\n    <div className='main-container'>\n      <AddHabit />\n      <HabitsContainer />\n    </div>\n  </HabitContextManager>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}